#! /usr/bin/%PYTHON%
# -*- coding: <utf-8> -*-

import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
import subprocess
import os
import shutil
from gi.repository import GObject
from gi.repository import Gio

subprocess.call("echo $LANG",shell=True)
LANG = os.environ['LANG']

loop = GObject.MainLoop()

def GetValue(targetfile,target,default):
	try:
		ofile = open(targetfile,'r')
		lines = ofile.readlines()
		ofile.close()
		value = ""
		for i in range(len(lines)) :
			line = lines[i].strip()
			if line[0:len(target)+1]==target+"=" :
				value = line[len(target)+1:len(line)]
				break
			else:
				value=default
	except IOError as (errno, strerror):
		value=default
	return value

def GetConfValue(target,default):
	value = GetValue("%GDM_CONF%",target,default)
	return value

def str_to_bool(state) :
	if state.capitalize()=="True" or state=="1":
		b_state = True
	else :
		b_state = False

	return b_state

def unquote(value):
	if value[0:1] == "'"  and value[len(value)-1:len(value)] == "'" :
		value = value[1:len(value)-1]
	return value

def Get_Bus():
	ps_name=""
	address=""
	user_name=""
	dbus_pid=""
	dbus_address=""
	proclst = os.listdir('/proc')
	for ps in proclst:
		try:
			i = int(ps)
			ps_name = open('/proc/'+ps+'/comm').read().strip()

			if ps_name=="dbus-daemon":

				ofile = open('/proc/'+ps+'/environ','r')
				lines = ofile.read().split('\00')
				ofile.close()

				for ev in lines :
					if ev[0:len('DBUS_SESSION_BUS_ADDRESS')]=='DBUS_SESSION_BUS_ADDRESS':
						address = ev
					if ev[0:len('USERNAME')]=='USERNAME':
						user_name = ev

				if user_name=="USERNAME=%GDM_USER%" and address!="":
					dbus_address = address[len('DBUS_SESSION_BUS_ADDRESS')+1:len(address)]
					dbus_pid = ps

		except:
			i = 0

	return dbus_address,dbus_pid

def _SetAutoLogin(AUTOLOGIN,USERNAME,TIMED,TIME) :
	if AUTOLOGIN :
		if TIMED :
			subprocess.call("/usr/bin/gdmlogin -a -u "+USERNAME+" -d "+str(int(TIME)),shell=True)
		else:
			subprocess.call("/usr/bin/gdmlogin -a -u "+USERNAME,shell=True)
	else:
		subprocess.call("/usr/bin/gdmlogin -m",shell=True)

class GDM3SetupDBusService(dbus.service.Object):
	def __init__(self):
		bus=dbus.SystemBus()
		bus_name = dbus.service.BusName('apps.nano77.gdm3setup', bus)
		dbus.service.Object.__init__(self, bus_name, '/apps/nano77/gdm3setup')

	def policykit_test(self,sender,connexion,action):
		bus = dbus.SystemBus()
		proxy_dbus = connexion.get_object('org.freedesktop.DBus','/org/freedesktop/DBus/Bus', False)
		dbus_info = dbus.Interface(proxy_dbus,'org.freedesktop.DBus')
		sender_pid = dbus_info.GetConnectionUnixProcessID(sender)
		proxy_policykit = bus.get_object('org.freedesktop.PolicyKit1','/org/freedesktop/PolicyKit1/Authority',False)
		policykit_authority = dbus.Interface(proxy_policykit,'org.freedesktop.PolicyKit1.Authority')

		Subject = ('unix-process', {'pid': dbus.UInt32(sender_pid, variant_level=1),
						'start-time': dbus.UInt64(0, variant_level=1)})
		(is_authorized,is_challenge,details) = policykit_authority.CheckAuthorization(Subject, action, {'': ''}, dbus.UInt32(1), '')
		return is_authorized

	@dbus.service.method('apps.nano77.gdm3setup',in_signature='ss', out_signature='s',
					sender_keyword='sender', connection_keyword='connexion')
	def SetUI(self,name,value,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			if name!='SHELL_THEME':
				if name == "WALLPAPER" :
					value = "file://"+value
				bus_adrress , bus_pid = Get_Bus()
				subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n '+name+' -v '+"'"+value+"'"+'"',shell=True)
			else :
				if value == "" or value == "Adwaita" :
					subprocess.call("gdmshelltheme -d",shell=True)
				else :
					subprocess.call("gdmshelltheme -n "+value,shell=True)
			return "OK"
		else :
			return "ERROR : YOU ARE NOT ALLOWED !"

	@dbus.service.method('apps.nano77.gdm3setup','','as',sender_keyword='sender', connection_keyword='connexion')
	def GetUI(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		ifile = open("/tmp/GET_GDM",'r')
		settings = ifile.readlines()
		ifile.close()
		os.remove("/tmp/GET_GDM")
		p = subprocess.Popen("gdmshelltheme -g ",stdout=subprocess.PIPE,shell=True)
		shelltheme = p.stdout.read().strip()
		settings.append("SHELL='"+shelltheme+"'\n")
		return settings

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetShellTheme(self,SHELL_THEME,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			if SHELL_THEME == "" or SHELL_THEME == "Adwaita" :
				subprocess.call("gdmshelltheme -d",shell=True)
			else :
				subprocess.call("gdmshelltheme -n "+SHELL_THEME,shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetShellTheme(self,sender=None, connexion=None):
		p = subprocess.Popen("gdmshelltheme -g ",stdout=subprocess.PIPE,shell=True)
		SHELL_THEME = p.stdout.read().strip()
		return SHELL_THEME

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetGtkTheme(self,GTK_THEME,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n GTK_THEME -v '+"'"+GTK_THEME+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetGtkTheme(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		GTK_THEME = unquote(GetValue("/tmp/GET_GDM","GTK","Adwaita"))
		os.remove("/tmp/GET_GDM")
		return GTK_THEME

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetIconTheme(self,ICON_THEME,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n ICON_THEME -v '+"'"+ICON_THEME+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetIconTheme(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		ICON_THEME = unquote(GetValue("/tmp/GET_GDM","ICON","gnome"))
		os.remove("/tmp/GET_GDM")
		return ICON_THEME

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetFont(self,FONT,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n FONT -v '+"'"+FONT+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetFont(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		FONT = unquote(GetValue("/tmp/GET_GDM","FONT","Cantarell 11"))
		os.remove("/tmp/GET_GDM")
		return FONT

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetCursorTheme(self,CURSOR,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n CURSOR_THEME -v '+"'"+CURSOR_THEME+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetCursorTheme(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		CURSOR_THEME = unquote(GetValue("/tmp/GET_GDM","CURSOR","Adwaita"))
		os.remove("/tmp/GET_GDM")
		return CURSOR_THEME

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetLogoIcon(self,LOGO_ICON,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n LOGO_ICON -v '+"'"+LOGO_ICON+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetLogoIcon(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		LOGO_ICON = GetValue("/tmp/GET_GDM","LOGO_ICON","distributor-logo")
		os.remove("/tmp/GET_GDM")
		return LOGO_ICON

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetFallbackLogo(self,FALLBACK_LOGO,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n FALLBACK_LOGO -v '+"'"+FALLBACK_LOGO+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetFallbackLogo(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		FALLBACK_LOGO = unquote(GetValue("/tmp/GET_GDM","FALLBACK_LOGO",""))
		os.remove("/tmp/GET_GDM")
		return FALLBACK_LOGO

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetShellLogo(self,SHELL_LOGO,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n SHELL_LOGO -v '+"'"+SHELL_LOGO+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetShellLogo(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		SHELL_LOGO = unquote(GetValue("/tmp/GET_GDM","SHELL_LOGO",""))
		os.remove("/tmp/GET_GDM")
		return SHELL_LOGO

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetWallpaper(self,WALLPAPER,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			WALLPAPER = Gio.File.new_for_path(WALLPAPER).get_uri()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n WALLPAPER -v '+"'"+WALLPAPER+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetWallpaper(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		WALLPAPER = unquote(GetValue("/tmp/GET_GDM","WALLPAPER",""))
		os.remove("/tmp/GET_GDM")
		print "WALLPAPER : "+WALLPAPER
		WALLPAPER = Gio.File.new_for_uri(WALLPAPER).get_path()
		return WALLPAPER

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetUserListVisibility(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		USER_LIST = GetValue("/tmp/GET_GDM","USER_LIST","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(USER_LIST)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetUserListVisibility(self,USER_LIST,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n USER_LIST -v '+"'"+str(bool(USER_LIST)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetRestartMenuVisibility(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		MENU_BTN = GetValue("/tmp/GET_GDM","BTN","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(MENU_BTN)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetRestartMenuVisibility(self,MENU_BTN,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n MENU_BTN -v '+"'"+str(bool(MENU_BTN)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetBannerVisibility(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		BANNER = GetValue("/tmp/GET_GDM","BANNER","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(BANNER)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetBannerVisibility(self,BANNER,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n BANNER -v '+"'"+str(bool(BANNER)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetBannerText(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		BANNER_TEXT = unquote(GetValue("/tmp/GET_GDM","BANNER_TEXT",""))
		os.remove("/tmp/GET_GDM")
		return BANNER_TEXT

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetBannerText(self,BANNER_TEXT,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n BANNER_TEXT -v '+"'"+BANNER_TEXT+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetClockDateVisibility(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		CLOCK_DATE = GetValue("/tmp/GET_GDM","CLOCK_DATE","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(CLOCK_DATE)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetClockDateVisibility(self,CLOCK_DATE,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n CLOCK_DATE -v '+"'"+str(bool(CLOCK_DATE)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetClockSecondsVisibility(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		CLOCK_SECONDS = GetValue("/tmp/GET_GDM","CLOCK_SECONDS","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(CLOCK_SECONDS)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetClockSecondsVisibility(self,CLOCK_SECONDS,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n CLOCK_SECONDS -v '+"'"+str(bool(CLOCK_SECONDS)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','bsbi','s',sender_keyword='sender', connection_keyword='connexion')
	def SetAutoLogin(self,AUTOLOGIN,USERNAME,TIMED,TIME,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			_SetAutoLogin(AUTOLOGIN,USERNAME,TIMED,TIME)
			return "OK"
		else :
			return "ERROR : YOU ARE NOT ALLOWED !"


	@dbus.service.method('apps.nano77.gdm3setup','','as',sender_keyword='sender', connection_keyword='connexion')
	def GetAutoLogin(self,sender=None, connexion=None):
		AutomaticLoginEnable = str_to_bool(GetConfValue("AutomaticLoginEnable","False"))
		AutomaticLogin = GetConfValue("AutomaticLogin","")
		TimedLoginEnable = str_to_bool(GetConfValue("TimedLoginEnable","False"))
		TimedLogin = GetConfValue("TimedLogin","")
		TimedLoginDelay = GetConfValue("TimedLoginDelay","30")

		AUTOLOGIN = str(AutomaticLoginEnable or TimedLoginEnable)
		TIMED = str(TimedLoginEnable)
		TIMED_TIME = TimedLoginDelay

		if AutomaticLoginEnable:
			USERNAME = AutomaticLogin

		if TimedLoginEnable:
			USERNAME = TimedLogin

		if not (AutomaticLoginEnable or TimedLoginEnable ):
			USERNAME = ""

		return AUTOLOGIN,USERNAME,TIMED,TIMED_TIME

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetAutoLoginState(self,AUTOLOGIN,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			USERNAME=GetConfValue("AutomaticLogin","")
			TIMEDUSERNAME=GetConfValue("TimedLogin","")
			if USERNAME=="" :
				if TIMEDUSERNAME!="" :
					USERNAME=TIMEDUSERNAME;
				else :
					USERNAME="nobody"
			if AUTOLOGIN :
				_SetAutoLogin(True,USERNAME,"","")
			else :
				_SetAutoLogin(False,"","","")
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','s','b',sender_keyword='sender', connection_keyword='connexion')
	def SetAutoLoginUserName(self,USERNAME,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			_SetAutoLogin(True,USERNAME,GetConfValue("TimedLoginEnable",False),GetConfValue("TimedLoginDelay",30))
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetAutoLoginTimed(self,TIMED,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			USERNAME=GetConfValue("AutomaticLogin","")
			TIMEDUSERNAME=GetConfValue("TimedLogin","")
			if TIMEDUSERNAME!="" :
				USERNAME=TIMEDUSERNAME
			if TIMED :
				_SetAutoLogin(True,USERNAME,True,30)
			else:
				_SetAutoLogin(True,USERNAME,False,0)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','i','b',sender_keyword='sender', connection_keyword='connexion')
	def SetAutoLoginTime(self,TIME,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			USERNAME=GetConfValue("AutomaticLogin","")
			TIMEDUSERNAME=GetConfValue("TimedLogin","")
			if TIMEDUSERNAME!="" :
				USERNAME=TIMEDUSERNAME
			_SetAutoLogin(True,USERNAME,True,TIME)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetAutoLoginState(self,sender=None, connexion=None):
		AutomaticLoginEnable = str_to_bool(GetConfValue("AutomaticLoginEnable","False"))
		TimedLoginEnable = str_to_bool(GetConfValue("TimedLoginEnable","False"))
		return AutomaticLoginEnable or TimedLoginEnable

	@dbus.service.method('apps.nano77.gdm3setup','','s',sender_keyword='sender', connection_keyword='connexion')
	def GetAutoLoginUserName(self,sender=None, connexion=None):
		AutomaticLoginEnable = str_to_bool(GetConfValue("AutomaticLoginEnable","False"))
		AutomaticLogin = GetConfValue("AutomaticLogin","")
		TimedLoginEnable = str_to_bool(GetConfValue("TimedLoginEnable","False"))
		TimedLogin = GetConfValue("TimedLogin","")
		USERNAME = ""
		if AutomaticLoginEnable:
			USERNAME = AutomaticLogin
		elif TimedLoginEnable:
			USERNAME = TimedLogin
		else :
			if AutomaticLogin!="" :
				USERNAME = AutomaticLogin
			elif TimedLogin!="":
				USERNAME=TimedLogin
		return USERNAME

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetAutoLoginTimed(self,sender=None, connexion=None):
		TimedLoginEnable = str_to_bool(GetConfValue("TimedLoginEnable","False"))
		return TimedLoginEnable

	@dbus.service.method('apps.nano77.gdm3setup','','i',sender_keyword='sender', connection_keyword='connexion')
	def GetAutoLoginTime(self,sender=None, connexion=None):
		TimedLoginEnable = str_to_bool(GetConfValue("TimedLoginEnable","False"))
		TimedLoginDelay = int(GetConfValue("TimedLoginDelay","30"))
		if TimedLoginEnable :
			return TimedLoginDelay
		else :
			return 0

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetFingerprintAuthentication(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		value = GetValue("/tmp/GET_GDM","FINGERPRINT_AUTHENTICATION","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(value)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetFingerprintAuthentication(self,FINGERPRINT_AUTHENTICATION,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n FINGERPRINT_AUTHENTICATION -v '+"'"+str(bool(FINGERPRINT_AUTHENTICATION)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','b',sender_keyword='sender', connection_keyword='connexion')
	def GetSmartcardAuthentication(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		value = GetValue("/tmp/GET_GDM","SMARTCARD_AUTHENTICATION","true")
		os.remove("/tmp/GET_GDM")
		return str_to_bool(value)

	@dbus.service.method('apps.nano77.gdm3setup','b','b',sender_keyword='sender', connection_keyword='connexion')
	def SetSmartcardAuthentication(self,SMARTCARD_AUTHENTICATION,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n SMARTCARD_AUTHENTICATION -v '+"'"+str(bool(SMARTCARD_AUTHENTICATION)).lower()+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup','','i',sender_keyword='sender', connection_keyword='connexion')
	def GetAllowedFailures(self,sender=None, connexion=None):
		subprocess.call("su - %GDM_USER% -s /bin/sh -c 'LANG="+LANG+" get_gdm'",shell=True)
		value = GetValue("/tmp/GET_GDM","ALLOWED_FAILURES","3")
		os.remove("/tmp/GET_GDM")
		return int(value)

	@dbus.service.method('apps.nano77.gdm3setup','i','b',sender_keyword='sender', connection_keyword='connexion')
	def SetAllowedFailures(self,ALLOWED_FAILURES,sender=None, connexion=None):
		if self.policykit_test(sender,connexion,'apps.nano77.gdm3setup.set') :
			bus_adrress , bus_pid = Get_Bus()
			subprocess.call('su - %GDM_USER% -s /bin/bash -c "LANG='+LANG+' DBUS_SESSION_BUS_ADDRESS='+bus_adrress+' DBUS_SESSION_BUS_PID='+bus_pid+' set_gdm -n ALLOWED_FAILURES -v '+"'"+str(ALLOWED_FAILURES)+"'"+'"',shell=True)
			return True
		else :
			return False

	@dbus.service.method('apps.nano77.gdm3setup',sender_keyword='sender', connection_keyword='connexion')
	def StopDaemon(self,sender=None, connexion=None):
		loop.quit()


DBusGMainLoop(set_as_default=True)
myservice = GDM3SetupDBusService()
loop.run()
